<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL的字符类型</title>
    <url>/2020/09/27/MySQL%E7%9A%84%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p><code>MySQL</code>提供了多种关于字符存储的类型，但是在大多数情况下我们只使用<code>char</code>和<code>varchar</code>即可。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR</td>
<td align="left">0 - 255字节</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left">VARCHAR</td>
<td align="left">0 - 65535 字节</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">TINYBLOB</td>
<td align="left">0 - 255字节</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">TINYTEXT</td>
<td align="left">0 - 255字节</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left">BLOB</td>
<td align="left">0 - 65 535字节</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left">TEXT</td>
<td align="left">0 - 65 535字节</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMBLOB</td>
<td align="left">0 - 16 777 215字节</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMTEXT</td>
<td align="left">0 - 16 777 215字节</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">LONGBLOB</td>
<td align="left">0 - 4 294 967 295字节</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">LONGTEXT</td>
<td align="left">0 - 4 294 967 295字节</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符串分二进制与非二进制类型，二进制用于储存图片、声音等文件，非二进制用于储存文本数据。</p>
<p>非二进制文本受字符集和校对规则影响。</p>
<p>其实字符集说白了就是字符编码。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>字符集(Character set)是多个字符的集合，字符集种类较多，每个字符集包含的字符个数不同。常用的字符集有<code>GBK</code>、<code>BIG5</code>、<code>UTF8</code>。</p>
<p><code>UTF8</code>字符集包含文字内容更广，如韩文、日文、德文兼容度更高，也是推荐使用的字符集（<code>UTF8MB4</code>）。</p>
<blockquote>
<p>表不设置字符集继承数据库，字段不设置字符集继承表的，所以一般我们在配置文件中为数据库指定字符集即可。</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">mysql> SHOW CHARACTER SET; -- 查看服务器支持的字符集
+----------+---------------------------------+---------------------+--------+
| Charset  | Description                     | Default collation   | Maxlen |
+----------+---------------------------------+---------------------+--------+
| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |
| ascii    | US ASCII                        | ascii_general_ci    |      1 |
| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |
| binary   | Binary pseudo charset           | binary              |      1 |
| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |
| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |
| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |
| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |
| cp850    | DOS West European               | cp850_general_ci    |      1 |
| cp852    | DOS Central European            | cp852_general_ci    |      1 |
| cp866    | DOS Russian                     | cp866_general_ci    |      1 |
| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |
| dec8     | DEC West European               | dec8_swedish_ci     |      1 |
| eucjpms  | UJIS for Windows Japanese       | eucjpms_japanese_ci |      3 |
| euckr    | EUC-KR Korean                   | euckr_korean_ci     |      2 |
| gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |
| gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 |
| gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 |
| geostd8  | GEOSTD8 Georgian                | geostd8_general_ci  |      1 |
| greek    | ISO 8859-7 Greek                | greek_general_ci    |      1 |
| hebrew   | ISO 8859-8 Hebrew               | hebrew_general_ci   |      1 |
| hp8      | HP West European                | hp8_english_ci      |      1 |
| keybcs2  | DOS Kamenicky Czech-Slovak      | keybcs2_general_ci  |      1 |
| koi8r    | KOI8-R Relcom Russian           | koi8r_general_ci    |      1 |
| koi8u    | KOI8-U Ukrainian                | koi8u_general_ci    |      1 |
| latin1   | cp1252 West European            | latin1_swedish_ci   |      1 |
| latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 |
| latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 |
| latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 |
| macce    | Mac Central European            | macce_general_ci    |      1 |
| macroman | Mac West European               | macroman_general_ci |      1 |
| sjis     | Shift-JIS Japanese              | sjis_japanese_ci    |      2 |
| swe7     | 7bit Swedish                    | swe7_swedish_ci     |      1 |
| tis620   | TIS620 Thai                     | tis620_thai_ci      |      1 |
| ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 |
| ujis     | EUC-JP Japanese                 | ujis_japanese_ci    |      3 |
| utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 |
| utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 |
| utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 |
| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |
| utf8mb4  | UTF-8 Unicode                   | utf8mb4_0900_ai_ci  |      4 |
+----------+---------------------------------+---------------------+--------+
41 rows in set (0.04 sec)</code></pre>
<h3 id="校对规则"><a href="#校对规则" class="headerlink" title="校对规则"></a>校对规则</h3><p>字符集内用于字符比较和排序的一套规则，以<code>_ci</code>结束的为大小写不敏感、<code>_bin</code>结束的为不区分大小写。</p>
<p>当使用不区分大小写的校对规则时<code>A</code>与<code>a</code>是相同的，否则则不相同，这会影响到排序与比对。</p>
<blockquote>
<p>修改表校对规则，对表的原字段将不影响，只对新增字段影响。</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">SHOW COLLATION; -- 查看服务器支持的校对规则</code></pre>
<h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>对于字符类型而言，其指定宽度均为存入宽度，以字符为单位。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> create table `test` (
    -> ch char(5) not null,
    -> vc varchar(5) not null
    -> ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin；</code></pre>
<h2 id="定长变长"><a href="#定长变长" class="headerlink" title="定长变长"></a>定长变长</h2><h3 id="区别差异"><a href="#区别差异" class="headerlink" title="区别差异"></a>区别差异</h3><p> <code>char</code>是定长字符串，当存入的字符数量不足指定宽度时，将会使用进行填充。</p>
<p> <code>varchar</code>是变长字符串，当存入的字符数类不足指定宽度时，不会使用任何字符进行填充。</p>
<blockquote>
<p><strong>通常情况下来讲</strong>，<code>char</code>的存取速度要比<code>varchar</code>要高（约50%），但是<strong>更加浪费磁盘空间</strong>。</p>
<p>在<code>InnoDB</code>存储引擎中，不存在这种差异。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center"><strong>插入值</strong></th>
<th align="center"><strong>CHAR(4)存入值</strong></th>
<th align="center"><strong>CHAR(4)占据空间</strong></th>
<th align="center"><strong>VARCHAR(4)存入值</strong></th>
<th align="center"><strong>VARCHAR(4)占据空间</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&#39;&#39;</code></td>
<td align="center"><code>&#39; &#39;</code></td>
<td align="center">4 bytes</td>
<td align="center"><code>&#39;&#39;</code></td>
<td align="center">1 byte</td>
</tr>
<tr>
<td align="center"><code>&#39;ab&#39;</code></td>
<td align="center"><code>&#39;ab &#39;</code></td>
<td align="center">4 bytes</td>
<td align="center"><code>&#39;ab&#39;</code></td>
<td align="center">3 bytes</td>
</tr>
<tr>
<td align="center"><code>&#39;abcd&#39;</code></td>
<td align="center"><code>&#39;abcd&#39;</code></td>
<td align="center">4 bytes</td>
<td align="center"><code>&#39;abcd&#39;</code></td>
<td align="center">5 bytes</td>
</tr>
<tr>
<td align="center"><code>&#39;abcdefgh&#39;</code></td>
<td align="center"><code>&#39;abcd&#39;</code></td>
<td align="center">4 bytes</td>
<td align="center"><code>&#39;abcd&#39;</code></td>
<td align="center">5 bytes</td>
</tr>
</tbody></table>
<p><strong>由于<code>varchar</code>类型是变长存储，所以需要有一个头部来标识真实内容占了多少字符，这个头部通常占据1个字节。</strong>即存入<code>abcd</code>的时候算上头部实际上是占用了5个字节。这也是为什么说通常情况下<code>varchar</code>比较节省内存，而不是说全部情况。</p>
<h3 id="差异对比"><a href="#差异对比" class="headerlink" title="差异对比"></a>差异对比</h3><p>如果要想进定长与变长的差异对比试验，需要用到以下两个函数。</p>
<blockquote>
<p>length()：查看字节数</p>
<p>char_length()：查看字符数</p>
</blockquote>
<p>建议在同一张数据表中统一使用<code>varchar</code>或<code>char</code>类型，这里更推荐使用<code>char</code>类型。</p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p><code>upper()</code>小写转大写，<code>lower()</code>大写转小写。</p>
<p>以下将演示大小写转换。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select upper("justthesame"),lower("JUSTTHESAME");
+----------------------+----------------------+
| upper("justthesame") | lower("JUSTTHESAME") |
+----------------------+----------------------+
| JUSTTHESAME          | justthesame          |
+----------------------+----------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="指定量取"><a href="#指定量取" class="headerlink" title="指定量取"></a>指定量取</h3><p><code>left()</code>与<code>right()</code>函数用于取左或右指定数量的字符。</p>
<p>以下将演示取左边3个字符。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select left("qwert",3);
+-----------------+
| left("qwert",3) |
+-----------------+
| qwe             |
+-----------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="中间字符"><a href="#中间字符" class="headerlink" title="中间字符"></a>中间字符</h3><p><code>mid()</code>从中间取字符串，参数二为指定起始位置（从1开始），参数三为取的字符数量（可不指定，一直取完）。</p>
<p>以下将演示从第二个字符开始取两个。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select mid("qwert",2,2);
+------------------+
| mid("qwert",2,2) |
+------------------+
| we               |
+------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="截取字符"><a href="#截取字符" class="headerlink" title="截取字符"></a>截取字符</h3><p> <code>substring()</code>从指定起始位置开始取出向右所有字符串，可指定结束位置。（其实我感觉这个和<code>mid()</code>好像没啥区别）。</p>
<p>以下将演示截取第一个字符到第四个字符。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select substring("qwertyui",1,4);
+---------------------------+
| substring("qwertyui",1,4) |
+---------------------------+
| qwer                      |
+---------------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="字符长度"><a href="#字符长度" class="headerlink" title="字符长度"></a>字符长度</h3><p><code>char_length()</code>可获取字符长度，如果要获取<code>char</code>类型的字符长度且包括填充空白符，需要修改<code>sql</code>模式。</p>
<p>修改<code>sql</code>模式：<code>SET sql_mode = &#39;PAD_CHAR_TO_FULL_LENGTH&#39;;</code></p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select char_length("qwertyu");
+------------------------+
| char_length("qwertyu") |
+------------------------+
|                      7 |
+------------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="字节长度"><a href="#字节长度" class="headerlink" title="字节长度"></a>字节长度</h3><p><code>length()</code>可获取字节长度。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select length("qwertyu");
+-------------------+
| length("qwertyu") |
+-------------------+
|                 7 |
+-------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="字符连接"><a href="#字符连接" class="headerlink" title="字符连接"></a>字符连接</h3><p><code>concat()</code>可将多段字符进行连接。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select concat("123","abc","456","def");
+---------------------------------+
| concat("123","abc","456","def") |
+---------------------------------+
| 123abc456def                    |
+---------------------------------+
1 row in set (0.00 sec)</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的安装与配置</title>
    <url>/2020/09/17/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h2><p>通过 Docker 搭建 MySQL 数据库环境，同时能同时启动多个 MySQL 版本。在安装前，最好上 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">docker</a> 官网上看一下 MySQL 的版本，更具具体需求版本安装 MySQL，假设你已经搭建好 Docker 环境下面介绍如何创建一个 MySQL 服务器实例。</p>
<h3 id="快速启动一个-MySQL-服务实例"><a href="#快速启动一个-MySQL-服务实例" class="headerlink" title="快速启动一个 MySQL 服务实例"></a>快速启动一个 MySQL 服务实例</h3><p>下面，我们通过通过 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">docker</a> 镜像，或者 <a href="https://hub.docker.com/r/mysql/mysql-server" target="_blank" rel="noopener">MySQL</a> 官方镜像，进行快速启动一个实例。</p>
<pre class=" language-sh"><code class="language-sh">$ docker search mysql
NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
mysql                             MySQL is a widely used, open-source relation…   9968                [OK]
# MySQL 官方镜像
$ docker image pull mysql:8.0.21</code></pre>
<p>拉取镜像成功以后，就可以在本机看到这个 <code>image</code> 文件了。</p>
<pre class=" language-sh"><code class="language-sh">$ docker images
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
mysql                                8.0.21              e1d7dc9731da        6 days ago          544MB</code></pre>
<p>现在，快速运行这个 <code>image</code> 文件。</p>
<pre class=" language-sh"><code class="language-sh"># Docker 官方镜像
$ docker run --name mysql8 \
  -p 3306:3306 \
  -e MYSQL_ROOT_PASSWORD=admin \
  --rm \
  -d mysql:8.0.21 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code></pre>
<p>上面命令的各个参数含义如下：</p>
<ul>
<li><code>--name mysql8 容器的名字叫做 mysql8</code></li>
<li><code>-p 3306:3306</code> 容器 MySQL 默认端口 <code>3306</code> 射到本机的 <code>3306</code> 端口。</li>
<li><code>-d</code> 在后台运行容器并打印容器ID。</li>
<li><code>--rm</code> 停止运行后，自动删除容器文件。</li>
<li><code>-e MYSQL_ROOT_PASSWORD=admin</code> 设置环境变量 <code>MYSQL_ROOT_PASSWORD</code> 值为 <code>admin</code> 来设置 <code>root</code> 密码，<a href="https://dev.mysql.com/doc/refman/8.0/en/environment-variables.html" target="_blank" rel="noopener">更多环境变量参考</a>。</li>
<li><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_col</code> 该命令以默认字符集 <code>utf8mb4</code> 和数据库默认排序规则 <code>utf8mb4</code> 启动 <code>MySQL</code> 服务，可以将许多配置选项作为标志传递给 mysqld。这将使您可以灵活地自定义容器，而无需 <code>cnf</code> 配置文件，配置 <code>MySQL Server</code> 的另一种方法是准备一个配置文件，并将其安装在容器内服务器配置文件的位置。有关详细信息，请参见<a href="https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-more-topics.html#docker-persisting-data-configuration" target="_blank" rel="noopener">持久数据和配置更改</a>。</li>
</ul>
<p>查看容器运行状态</p>
<pre class=" language-sh"><code class="language-sh">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
bce9df21fb98        mysql:8.0.21        "docker-entrypoint.s…"   3 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp, 33060/tcp   mysql8</code></pre>
<h3 id="使用-docker-compose-部署MySQL"><a href="#使用-docker-compose-部署MySQL" class="headerlink" title="使用 docker-compose 部署MySQL"></a>使用 docker-compose 部署MySQL</h3><p>编辑 <code>docker-compose</code> 文件</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.1"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.0.21
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql8
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./conf/my.cnf<span class="token punctuation">:</span>/etc/my.cnf
      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> admin</code></pre>
<p>运行容器</p>
<pre class=" language-sh"><code class="language-sh">$ docker-compose up -d
Creating network "docker-mysql_default" with the default driver
Creating mysql8 ... done
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
dedd71769326        mysql:8.0.21        "docker-entrypoint.s…"   9 seconds ago       Up 4 seconds        0.0.0.0:3306->3306/tcp, 33060/tcp   mysql8</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的账户设置</title>
    <url>/2020/09/18/MySQL%E7%9A%84%E8%B4%A6%E6%88%B7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>使用 <code>docker</code> 安装 <code>MySQL</code> 并快速启动，现在我们进入<code>docker</code>容器。</p>
<pre class=" language-bash"><code class="language-bash">➜  ~ docker <span class="token function">exec</span> -it mysql8 /bin/bash
root@dedd71769326:/<span class="token comment" spellcheck="true">#</span></code></pre>
<h2 id="MySQL数据库连接"><a href="#MySQL数据库连接" class="headerlink" title="MySQL数据库连接"></a>MySQL数据库连接</h2><p><strong>MySQL命令语法</strong></p>
<p>用户名是你登录的用户，主机名或者IP地址为可选项，如果是本地连接则不需要设置，远程连接服务端则需要填写，密码是对应用户的密码。</p>
<pre class=" language-sql"><code class="language-sql">mysql –u用户名 <span class="token punctuation">[</span>–h主机名或者IP地址<span class="token punctuation">,</span><span class="token operator">-</span>P端口号<span class="token punctuation">]</span> –p密码</code></pre>
<ul>
<li><code>-u</code>：登录的用户名。</li>
<li><code>-h</code>：远程主机名或IP地址，不填写则默认本地地址。</li>
<li><code>-P</code>：<code>MySQL</code>端口号，默认为3306。</li>
<li><code>-p</code>：该登录用户对应的登录密码。</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">root@dedd71769326:/# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 9
Server version: 8.0.21 MySQL Community Server - GPL

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</code></pre>
<h2 id="MySQL账户查看"><a href="#MySQL账户查看" class="headerlink" title="MySQL账户查看"></a>MySQL账户查看</h2><p>由于 <code>root</code> 权限很高，所以一般项目上会分配不同的账户和权限供程序员操作。</p>
<h3 id="查看已有账户"><a href="#查看已有账户" class="headerlink" title="查看已有账户"></a>查看已有账户</h3><pre class=" language-mysql"><code class="language-mysql">mysql> select user from mysql.user;
+------------------+
| user             |
+------------------+
| root             |
| mysql.infoschema |
| mysql.session    |
| mysql.sys        |
| root             |
+------------------+
5 rows in set (0.03 sec)</code></pre>
<p>为什么有两条 <code>root</code> 信息？我们来详细看一下。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select user, host from mysql.user;
+------------------+-----------+
| user             | host      |
+------------------+-----------+
| root             | %         |
| mysql.infoschema | localhost |
| mysql.session    | localhost |
| mysql.sys        | localhost |
| root             | localhost |
+------------------+-----------+
5 rows in set (0.00 sec)</code></pre>
<p>这里<code>host</code>字段代表允许任意<code>ip地址登录MySQL</code>。目前<code>root</code>账户允许远程和本地登录。</p>
<h3 id="查看当前账户"><a href="#查看当前账户" class="headerlink" title="查看当前账户"></a>查看当前账户</h3><pre class=" language-mysql"><code class="language-mysql">mysql> select current_user;
+----------------+
| current_user   |
+----------------+
| root@localhost |
+----------------+
1 row in set (0.00 sec)</code></pre>
<p>如果我们使用外部电脑连接</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select current_user;
+----------------+
| current_user   |
+----------------+
| root@% |
+----------------+
1 row in set (0.00 sec)</code></pre>
<p>则表示当前登陆<code>root</code>账户允许远程和本地登录。</p>
<h2 id="MySQL账户创建"><a href="#MySQL账户创建" class="headerlink" title="MySQL账户创建"></a>MySQL账户创建</h2><p><strong>MySQL命令语法</strong></p>
<pre class=" language-mysql"><code class="language-mysql">CREATE USER [IF NOT EXISTS]
    user [auth_option] [, user [auth_option]] ...
    DEFAULT ROLE role [, role ] ...
    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]
    [WITH resource_option [resource_option] ...]
    [password_option | lock_option] ...

user:
    (see Section 6.2.4, “Specifying Account Names”)

auth_option: {
    IDENTIFIED BY 'auth_string'
  | IDENTIFIED WITH auth_plugin
  | IDENTIFIED WITH auth_plugin BY 'auth_string'
  | IDENTIFIED WITH auth_plugin AS 'hash_string'
}

tls_option: {
   SSL
 | X509
 | CIPHER 'cipher'
 | ISSUER 'issuer'
 | SUBJECT 'subject'
}

resource_option: {
    MAX_QUERIES_PER_HOUR count
  | MAX_UPDATES_PER_HOUR count
  | MAX_CONNECTIONS_PER_HOUR count
  | MAX_USER_CONNECTIONS count
}

password_option: {
    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]
  | PASSWORD HISTORY {DEFAULT | N}
  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}
  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]
}

lock_option: {
    ACCOUNT LOCK
  | ACCOUNT UNLOCK
}</code></pre>
<ul>
<li><p><code>user</code> ：账户名称，语法是 <code>&#39;user_name&#39;@&#39;host_name&#39;</code> ，其中主机地址可以写为 <code>%</code>表示接受任何地址的连接。</p>
</li>
<li><p><code>auth_option</code> ：身份验证方式，可以指定密码以及认证插件<code>（mysql_native_password、sha256_password、caching_sha2_password）</code>。</p>
</li>
<li><p><code>tls_option</code>： 加密连接选项。</p>
</li>
<li><p><code>resource_option</code>： 用户资源限制，比如每小时最大连接数。</p>
</li>
<li><p><code>password_option</code>： 密码额外的控制，比如设定失效时间。</p>
</li>
<li><p><code>lock_option</code>： 账户锁定选项，由管理员上锁或者解锁 <code>（ACCOUNT LOCK | ACCOUNT UNLOCK）</code>。</p>
</li>
</ul>
<p>最简单的就是指定账户名+密码</p>
<pre class=" language-mysql"><code class="language-mysql">CREATE USER 'tian'@'localhost' IDENTIFIED BY 'password';</code></pre>
<p>加上认证插件</p>
<pre class=" language-mysql"><code class="language-mysql">CREATE USER 'tian'@'localhost' IDENTIFIED WITH sha256_password BY 'password';</code></pre>
<p>指定密码过期，以便用户第一次使用的时候需要修改密码</p>
<pre class=" language-mysql"><code class="language-mysql">CREATE USER 'tian'@'localhost' IDENTIFIED BY 'new_password' PASSWORD EXPIRE;</code></pre>
<p>也可以指定每隔一段时间修改一次新密码</p>
<pre class=" language-mysql"><code class="language-mysql">CREATE USER 'tian'@'localhost' IDENTIFIED BY 'new_password' PASSWORD EXPIRE INTERVAL 180 DAY;</code></pre>
<p>可以指定加密连接</p>
<pre class=" language-mysql"><code class="language-mysql">-- 不使用加密连接
CREATE USER 'tian'@'localhost' REQUIRE NONE；
-- 使用加密连接
CREATE USER 'tian'@'localhost' REQUIRE SSL;
-- 使用加密连接，并要求客户端提供有效证书
CREATE USER 'tian'@'localhost' REQUIRE X509;

CREATE USER 'tian'@'localhost' REQUIRE ISSUER 'CA颁发的有效X.509证书';

CREATE USER 'tian'@'localhost' REQUIRE SUBJECT '包含主题的有效X.509证书';

CREATE USER 'tian'@'localhost' REQUIRE CIPHER '指定的加密方法';</code></pre>
<p>可以指定资源控制</p>
<pre class=" language-mysql"><code class="language-mysql">-- 单位小时内，账户被允许查询500次，更新100次，单位小时内最大连接数不限制。最大并发连接数不限制
CREATE USER 'tian'@'localhost' WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100 MAX_CONNECTIONS_PER_HOUR 0 MAX_USER_CONNECTIONS 0；</code></pre>
<p>可以锁定账户</p>
<pre class=" language-mysql"><code class="language-mysql">-- 锁定
CREATE USER 'tian'@'localhost' ACCOUNT LOCK
-- 解锁
ALTER USER 'tian'@'localhost' ACCOUNT UNLOCK</code></pre>
<p>最后完整的命令选项大概这个样子</p>
<pre class=" language-mysql"><code class="language-mysql">CREATE USER 'user_name'@'host_name' IDENTIFIED [WITH auth_plugin] BY 'auth_string' [REQUIRE NONE(SSL,X509)] [WITH MAX_QUERIES_PER_HOUR count | MAX_UPDATES_PER_HOUR count | MAX_CONNECTIONS_PER_HOUR count | MAX_USER_CONNECTIONS count] [PASSWORD EXPIRE] [ACCOUNT LOCK]</code></pre>
<p>如果你要删除账户</p>
<pre class=" language-mysql"><code class="language-mysql">DROP USER 'tian'@'localhost';</code></pre>
<p>如果你要修改名称</p>
<pre class=" language-mysql"><code class="language-mysql">RENAME USER 'tian'@'localhost' TO 'tina'@'127.0.0.1';</code></pre>
<h2 id="MySQL角色创建"><a href="#MySQL角色创建" class="headerlink" title="MySQL角色创建"></a>MySQL角色创建</h2><p>MySQL8里新加入了对于角色的管理，下面就简单的说一下如何使用：<br>角色可以理解为一组权限的集合，然后将角色赋给某个帐户，该帐户就拥有了角色对应的权限，每个帐户可以拥有多个角色，就像游戏里，你可以有很多称号一样。</p>
<pre class=" language-mysql"><code class="language-mysql">-- 名字规范
'role_name'@'host_name'
-- 通常仅使用用户名部分指定角色名称，并隐式使用主机名部分 '%'，主机名部分没有任何意义
'admin'</code></pre>
<p>创建角色</p>
<pre class=" language-mysql"><code class="language-mysql">-- 省略主机名，默认为 '%'
CREATE ROLE 'admin', 'dev';
-- 这种也可以，但是没意义
CREATE ROLE 'app'@'localhost';</code></pre>
<p>移除角色</p>
<pre class=" language-mysql"><code class="language-mysql">DROP ROLE 'admin', 'dev';</code></pre>
<h2 id="MySQL账户更新"><a href="#MySQL账户更新" class="headerlink" title="MySQL账户更新"></a>MySQL账户更新</h2><p><strong>MySQL命令语法</strong></p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER [IF EXISTS]
    user [auth_option] [, user [auth_option]] ...
    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]
    [WITH resource_option [resource_option] ...]
    [password_option | lock_option] ...

ALTER USER [IF EXISTS] USER() user_func_auth_option

ALTER USER [IF EXISTS]
    user DEFAULT ROLE
    {NONE | ALL | role [, role ] ...}

user:
    (see Section 6.2.4, “Specifying Account Names”)

auth_option: {
    IDENTIFIED BY 'auth_string'
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | IDENTIFIED WITH auth_plugin
  | IDENTIFIED WITH auth_plugin BY 'auth_string'
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | IDENTIFIED WITH auth_plugin AS 'auth_string'
  | DISCARD OLD PASSWORD
}

user_func_auth_option: {
    IDENTIFIED BY 'auth_string'
        [REPLACE 'current_auth_string']
        [RETAIN CURRENT PASSWORD]
  | DISCARD OLD PASSWORD
}

tls_option: {
   SSL
 | X509
 | CIPHER 'cipher'
 | ISSUER 'issuer'
 | SUBJECT 'subject'
}

resource_option: {
    MAX_QUERIES_PER_HOUR count
  | MAX_UPDATES_PER_HOUR count
  | MAX_CONNECTIONS_PER_HOUR count
  | MAX_USER_CONNECTIONS count
}

password_option: {
    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]
  | PASSWORD HISTORY {DEFAULT | N}
  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}
  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]
}

lock_option: {
    ACCOUNT LOCK
  | ACCOUNT UNLOCK
}</code></pre>
<p>参数选项参考创建账户。</p>
<p>修改自己当前的密码</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER USER() IDENTIFIED BY 'new_password';</code></pre>
<p>修改账户密码</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER 'tian'@'localhost' IDENTIFIED BY 'new_password';</code></pre>
<p>修改认证插件</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER 'tian'@'localhost' IDENTIFIED WITH mysql_native_password;</code></pre>
<p>修改密码和插件</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER 'tian'@'localhost' IDENTIFIED WITH mysql_native_password BY 'new_password';</code></pre>
<p>修改角色</p>
<pre class=" language-mysql"><code class="language-mysql">-- 授予自定义角色
ALTER USER 'tian'@'localhost' DEFAULT ROLE your_role_name;
-- 无角色
ALTER USER 'tian'@'localhost' DEFAULT ROLE NONE;
-- 所有角色
ALTER USER 'tian'@'localhost' DEFAULT ROLE ALL;</code></pre>
<p>修改加密方式</p>
<pre class=" language-mysql"><code class="language-mysql">-- 只有账户密码正确，无须加密连接
ALTER USER 'tian'@'localhost' REQUIRE NONE;
-- 需要加密连接
ALTER USER 'tian'@'localhost' REQUIRE SSL;
...</code></pre>
<p>修改资源访问</p>
<pre class=" language-mysql"><code class="language-mysql">-- 单位小时内，最大查询数量和更新数量
ALTER USER 'tian'@'localhost' WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;</code></pre>
<p>指定密码过期</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER 'tian'@'localhost' PASSWORD EXPIRE;</code></pre>
<p>修改锁定解锁</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER USER 'tian'@'localhost' ACCOUNT LOCK;
ALTER USER 'tian'@'localhost' ACCOUNT UNLOCK;</code></pre>
<h2 id="MySQL账户授权"><a href="#MySQL账户授权" class="headerlink" title="MySQL账户授权"></a>MySQL账户授权</h2><p><strong>MySQL命令语法</strong></p>
<pre class=" language-mysql"><code class="language-mysql">GRANT
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    ON [object_type] priv_level
    TO user_or_role [, user_or_role] ...
    [WITH GRANT OPTION]
    [AS user
        [WITH ROLE
            DEFAULT
          | NONE
          | ALL
          | ALL EXCEPT role [, role ] ...
          | role [, role ] ...
        ]
    ]
}

GRANT PROXY ON user_or_role
    TO user_or_role [, user_or_role] ...
    [WITH GRANT OPTION]

GRANT role [, role] ...
    TO user_or_role [, user_or_role] ...
    [WITH ADMIN OPTION]

object_type: {
    TABLE
  | FUNCTION
  | PROCEDURE
}

priv_level: {
    *
  | *.*
  | db_name.*
  | db_name.tbl_name
  | tbl_name
  | db_name.routine_name
}

user_or_role: {
    user
  | role
}

user:
    (see Section 6.2.4, “Specifying Account Names”)

role:
    (see Section 6.2.5, “Specifying Role Names”)</code></pre>
<p><code>GRANT</code>语法使得管理员能够授予账户<strong>权限或者角色</strong>，但是<code>GRANT</code><strong>不能</strong>再一个语句中同时授予权限和角色。</p>
<ul>
<li><strong>有ON，是授予权限</strong></li>
<li><strong>无ON，是授予角色</strong></li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">-- 授予数据库db1的所有权限给指定账户
GRANT ALL ON db1.* TO 'tian'@'localhost';
-- 授予角色给指定的账户
GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';
-- 授予数据库world的SELECT权限给指定的角色
GRANT SELECT ON world.* TO 'role3';</code></pre>
<p> 基本语法</p>
<pre class=" language-mysql"><code class="language-mysql">GRANT [权限] ON [数据库名].[表名] TO 'user_name'@'localhost' ...;
-- 授予所有数据库的权限
GRANT [权限] ON *.* TO 'user_name'@'localhost' ...;</code></pre>
<p> 注：全局权限是管理或适用于给定服务器上的所有数据库。要分配全局权限，请使用 <code>ON *.*</code>语法</p>
<p>下面是权限列表</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show privileges;
+----------------------------+---------------------------------------+-------------------------------------------------------+
| Privilege                  | Context                               | Comment                                               |
+----------------------------+---------------------------------------+-------------------------------------------------------+
| Alter                      | Tables                                | To alter the table                                    |
| Alter routine              | Functions,Procedures                  | To alter or drop stored functions/procedures          |
| Create                     | Databases,Tables,Indexes              | To create new databases and tables                    |
| Create routine             | Databases                             | To use CREATE FUNCTION/PROCEDURE                      |
| Create role                | Server Admin                          | To create new roles                                   |
| Create temporary tables    | Databases                             | To use CREATE TEMPORARY TABLE                         |
| Create view                | Tables                                | To create new views                                   |
| Create user                | Server Admin                          | To create new users                                   |
| Delete                     | Tables                                | To delete existing rows                               |
| Drop                       | Databases,Tables                      | To drop databases, tables, and views                  |
| Drop role                  | Server Admin                          | To drop roles                                         |
| Event                      | Server Admin                          | To create, alter, drop and execute events             |
| Execute                    | Functions,Procedures                  | To execute stored routines                            |
| File                       | File access on server                 | To read and write files on the server                 |
| Grant option               | Databases,Tables,Functions,Procedures | To give to other users those privileges you possess   |
| Index                      | Tables                                | To create or drop indexes                             |
| Insert                     | Tables                                | To insert data into tables                            |
| Lock tables                | Databases                             | To use LOCK TABLES (together with SELECT privilege)   |
| Process                    | Server Admin                          | To view the plain text of currently executing queries |
| Proxy                      | Server Admin                          | To make proxy user possible                           |
| References                 | Databases,Tables                      | To have references on tables                          |
| Reload                     | Server Admin                          | To reload or refresh tables, logs and privileges      |
| Replication client         | Server Admin                          | To ask where the slave or master servers are          |
| Replication slave          | Server Admin                          | To read binary log events from the master             |
| Select                     | Tables                                | To retrieve rows from table                           |
| Show databases             | Server Admin                          | To see all databases with SHOW DATABASES              |
| Show view                  | Tables                                | To see views with SHOW CREATE VIEW                    |
| Shutdown                   | Server Admin                          | To shut down the server                               |
| Super                      | Server Admin                          | To use KILL thread, SET GLOBAL, CHANGE MASTER, etc.   |
| Trigger                    | Tables                                | To use triggers                                       |
| Create tablespace          | Server Admin                          | To create/alter/drop tablespaces                      |
| Update                     | Tables                                | To update existing rows                               |
| Usage                      | Server Admin                          | No privileges - allow connect only                    |
| XA_RECOVER_ADMIN           | Server Admin                          |                                                       |
| SHOW_ROUTINE               | Server Admin                          |                                                       |
| RESOURCE_GROUP_USER        | Server Admin                          |                                                       |
| SET_USER_ID                | Server Admin                          |                                                       |
| SESSION_VARIABLES_ADMIN    | Server Admin                          |                                                       |
| CLONE_ADMIN                | Server Admin                          |                                                       |
| PERSIST_RO_VARIABLES_ADMIN | Server Admin                          |                                                       |
| ROLE_ADMIN                 | Server Admin                          |                                                       |
| BACKUP_ADMIN               | Server Admin                          |                                                       |
| CONNECTION_ADMIN           | Server Admin                          |                                                       |
| RESOURCE_GROUP_ADMIN       | Server Admin                          |                                                       |
| INNODB_REDO_LOG_ARCHIVE    | Server Admin                          |                                                       |
| BINLOG_ENCRYPTION_ADMIN    | Server Admin                          |                                                       |
| REPLICATION_SLAVE_ADMIN    | Server Admin                          |                                                       |
| SYSTEM_VARIABLES_ADMIN     | Server Admin                          |                                                       |
| GROUP_REPLICATION_ADMIN    | Server Admin                          |                                                       |
| SYSTEM_USER                | Server Admin                          |                                                       |
| APPLICATION_PASSWORD_ADMIN | Server Admin                          |                                                       |
| TABLE_ENCRYPTION_ADMIN     | Server Admin                          |                                                       |
| SERVICE_CONNECTION_ADMIN   | Server Admin                          |                                                       |
| AUDIT_ADMIN                | Server Admin                          |                                                       |
| BINLOG_ADMIN               | Server Admin                          |                                                       |
| ENCRYPTION_KEY_ADMIN       | Server Admin                          |                                                       |
| INNODB_REDO_LOG_ENABLE     | Server Admin                          |                                                       |
| REPLICATION_APPLIER        | Server Admin                          |                                                       |
+----------------------------+---------------------------------------+-------------------------------------------------------+
58 rows in set (0.00 sec)</code></pre>
<p>权限范围示例</p>
<pre class=" language-mysql"><code class="language-mysql">-- 数据库权限
GRANT ALL ON mydb.* TO 'user_name'@'host_name';
-- 表权限
GRANT ALL ON mydb.mytable TO 'user_name'@'host_name';
-- 列权限
GRANT SELECT (col1), INSERT (col1, col2) ON mydb.mytable TO 'user_name'@'host_name';

-- 存储过程权限
GRANT CREATE ROUTINE ON mydb.* TO 'user_name'@'host_name';
GRANT EXECUTE ON PROCEDURE mydb.myproc TO 'user_name'@'host_name';</code></pre>
<p> 授权之后可以使用<code>flush</code>命令使其立即生效</p>
<pre class=" language-mysql"><code class="language-mysql">FLUSH PRIVILEGES</code></pre>
<h2 id="FLUSH语法"><a href="#FLUSH语法" class="headerlink" title="FLUSH语法"></a>FLUSH语法</h2><pre class=" language-mysql"><code class="language-mysql">FLUSH [NO_WRITE_TO_BINLOG | LOCAL] {
    flush_option [, flush_option] ...
  | tables_option
}

flush_option: {
    BINARY LOGS
  | ENGINE LOGS
  | ERROR LOGS
  | GENERAL LOGS
  | HOSTS
  | LOGS
  | PRIVILEGES
  | OPTIMIZER_COSTS
  | RELAY LOGS [FOR CHANNEL channel]
  | SLOW LOGS
  | STATUS
  | USER_RESOURCES
}

tables_option: {
    TABLES
  | TABLES tbl_name [, tbl_name] ...
  | TABLES WITH READ LOCK
  | TABLES tbl_name [, tbl_name] ... WITH READ LOCK
  | TABLES tbl_name [, tbl_name] ... FOR EXPORT
}</code></pre>
<p><strong>FLUSH PRIVILEGES</strong> 包含以下操作</p>
<ol>
<li><p>重新加载<code>mysql</code>系统数据库中的<code>grant</code>表中的权限信息，并清除<code>caching_sha2_password</code>身份验证插件使用的内存缓存。</p>
</li>
<li><p>服务器读取包含动态特权分配的<code>global_grants</code>表，并注册其中的任何未注册特权。</p>
</li>
<li><p>服务器通过<code>GRANT、CREATE USER、CREATE SERVER和INSTALL PLUGIN</code>语句将信息缓存到内存中。对应的<code>REVOKE、DROP USER、DROP SERVER和UNINSTALL</code>插件语句不会释放这些内存，因此对于执行许多导致缓存的语句实例的服务器，内存使用量将会增加。可以使用刷新特权释放此缓存内存。</p>
</li>
</ol>
<p><strong>FLUSH TABLES</strong> 包含以下操作</p>
<p>关闭所有打开的表，强制关闭所有正在使用的表，并刷新准备好的语句缓存。</p>
<h2 id="REVOKE语法"><a href="#REVOKE语法" class="headerlink" title="REVOKE语法"></a>REVOKE语法</h2><p>既然可以授权，那么就可以撤销</p>
<pre class=" language-mysql"><code class="language-mysql">REVOKE
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    ON [object_type] priv_level
    FROM user_or_role [, user_or_role] ...

REVOKE ALL [PRIVILEGES], GRANT OPTION
    FROM user_or_role [, user_or_role] ...

REVOKE PROXY ON user_or_role
    FROM user_or_role [, user_or_role] ...

REVOKE role [, role ] ...
    FROM user_or_role [, user_or_role ] ...

user_or_role: {
    user
  | role
}

user:
    (see Section 6.2.4, “Specifying Account Names”)

role:
    (see Section 6.2.5, “Specifying Role Names”.</code></pre>
<p><code>REVOKE</code>可以实现权限或者角色的撤销（前提：拥有GRANT权限和REVOKE权限）</p>
<pre class=" language-mysql"><code class="language-mysql">-- 撤销用户的INSERT权限
REVOKE INSERT ON *.* FROM 'tian'@'localhost';
-- 撤销用户的指定角色
REVOKE 'role1', 'role2' FROM 'user1'@'localhost', 'user2'@'localhost';
-- 撤销角色的INSERT权限
REVOKE SELECT ON world.* FROM 'role3';</code></pre>
<p>撤销所有权限（只能撤销权限，不能撤销角色）</p>
<pre class=" language-mysql"><code class="language-mysql">-- 从账户或者角色上撤销所有权限
REVOKE ALL PRIVILEGES, GRANT OPTION FROM user_or_role [, user_or_role] ...
-- 撤销账户
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'tian'@'localhost'
-- 撤销角色
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'role3'</code></pre>
<p>在全局上撤销权限（<em>.</em>）</p>
<pre class=" language-mysql"><code class="language-mysql">-- 全局上撤销所有权限
REVOKE ALL ON *.* FROM 'tian'@'localhost';</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的数据库操作</title>
    <url>/2020/09/21/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><p>使用<code>show databases;</code>可查看所有的数据库。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.03 sec)</code></pre>
<p>使用<code>show create database 数据库名;</code>可查看某一数据库的创建信息。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show create database mysql;
+----------+---------------------------------------------------------------------------------------------------------------------------------+
| Database | Create Database                                                                                                                 |
+----------+---------------------------------------------------------------------------------------------------------------------------------+
| mysql    | CREATE DATABASE `mysql` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */ |
+----------+---------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.01 sec)</code></pre>
<p>使用<code>select database();</code>可查看当前所在的数据库。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select database();
+------------+
| database() |
+------------+
| mysql      |
+------------+
1 row in set (0.00 sec)</code></pre>
<p>使用<code>show variables like &#39;character%&#39;;</code>可查看数据库编码集。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show variables like 'character%';
+--------------------------+--------------------------------+
| Variable_name            | Value                          |
+--------------------------+--------------------------------+
| character_set_client     | latin1                         |
| character_set_connection | latin1                         |
| character_set_database   | utf8mb4                        |
| character_set_filesystem | binary                         |
| character_set_results    | latin1                         |
| character_set_server     | utf8mb4                        |
| character_set_system     | utf8                           |
| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |
+--------------------------+--------------------------------+
8 rows in set (0.00 sec)</code></pre>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>使用<code>create database 数据库名 charset 字符编码;</code>可创建数据库。</p>
<p>命名规则：</p>
<ul>
<li>数字、字母、下划线，<code>＠</code>、<code>＃</code>、<code>＄</code>。</li>
<li>库名区分字母大小写。</li>
<li>不能使用特殊字符和mysql关键字，不能单独使用数字，最长128位。</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">mysql> create database students charset utf8;
Query OK, 1 row affected, 1 warning (0.05 sec)</code></pre>
<h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h2><p>使用<code>use 数据库名;</code>可进入指定的数据库。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> use students;
Database changed
mysql> select database();
+------------+
| database() |
+------------+
| students   |
+------------+
1 row in set (0.00 sec)</code></pre>
<h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>使用<code>alter database 数据库名 charset 字符编码;</code></p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show create database students;
+----------+------------------------------------------------------------------------------------------------------+
| Database | Create Database                                                                                      |
+----------+------------------------------------------------------------------------------------------------------+
| students | CREATE DATABASE `students` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION='N' */ |
+----------+------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql> alter database students charset=gbk;
Query OK, 1 row affected (0.01 sec)

mysql> show create database students;
+----------+-----------------------------------------------------------------------------------------------------+
| Database | Create Database                                                                                     |
+----------+-----------------------------------------------------------------------------------------------------+
| students | CREATE DATABASE `students` /*!40100 DEFAULT CHARACTER SET gbk */ /*!80016 DEFAULT ENCRYPTION='N' */ |
+----------+-----------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)</code></pre>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>使用<code>drop database 数据库名;</code>可对数据库进行删除操作。</p>
<p>为了防止删除不存在的数据库报错可以使用<code>if</code>判断要执行删除的数据库是否存在，<code>drop database if exists 数据库名;</code></p>
<pre class=" language-mysql"><code class="language-mysql">mysql> drop database if exists students;
Query OK, 0 rows affected (0.09 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)</code></pre>
<h2 id="系统库"><a href="#系统库" class="headerlink" title="系统库"></a>系统库</h2><p><code>MySQL</code>在初始化后会创建一些系统库，不同的系统库有不同的用处。</p>
<p><code>information_schema</code>： 虚拟库，不占用磁盘空间，存储的是数据库启动后的一些参数，如用户表信息、列信息、权限信息、字符信息等。</p>
<p><code>performance_schema</code>： <code>MySQL5.5</code>开始新增一个数据库：主要用于收集数据库服务器性能参数，记录处理查询请求时发生的各种事件、锁等现象。</p>
<p><code>mysql</code>： 授权库，主要存储系统用户的权限信息</p>
<p><code>sys</code>：系统库使用基础环境。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的数值类型</title>
    <url>/2020/09/24/MySQL%E7%9A%84%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>整数类型包含<code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、 <code>BIGINT</code>等。</p>
<h3 id="存取范围"><a href="#存取范围" class="headerlink" title="存取范围"></a>存取范围</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">存储大小</th>
<th align="center">默认显示宽度（个）</th>
<th align="center">范围（有符号）</th>
<th align="center">范围（无符号）</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TINYINT(m)</td>
<td align="center">1Byte</td>
<td align="center">m：4</td>
<td align="center">-128 - 127</td>
<td align="center">0 - 255</td>
<td>小整数值</td>
</tr>
<tr>
<td align="center">SMALLINT(m)</td>
<td align="center">2Byte</td>
<td align="center">m：6</td>
<td align="center">-32768 - 32767</td>
<td align="center">0 - 65535</td>
<td>大整数值</td>
</tr>
<tr>
<td align="center">MEDIUMINT(m)</td>
<td align="center">3Byte</td>
<td align="center">m：9</td>
<td align="center">-8388608 - 8388607</td>
<td align="center">0 - 16777215</td>
<td>大整数值</td>
</tr>
<tr>
<td align="center">INT|INTEGER(m)</td>
<td align="center">4Byte</td>
<td align="center">m：11</td>
<td align="center">-2147483648 - 2147483647</td>
<td align="center">0 - 4294967295</td>
<td>大整数值</td>
</tr>
<tr>
<td align="center">BIGINT(m)</td>
<td align="center">8Byte</td>
<td align="center">m：20</td>
<td align="center">-9233372036854775808 - 9223372036854775807</td>
<td align="center">0 - 18446744073709551615</td>
<td>极大整数值</td>
</tr>
</tbody></table>
<p><code>m</code>为其显示宽度，在为字段设置 <code>zerofill</code>约束条件时有效，否则将不会填充满整个显示宽度。</p>
<h3 id="可选约束"><a href="#可选约束" class="headerlink" title="可选约束"></a>可选约束</h3><p><code>unsigned</code>：使用无符号存储。</p>
<p><code>zerofill</code>：显示宽度不够时使用0进行填充。</p>
<h3 id="显示宽度"><a href="#显示宽度" class="headerlink" title="显示宽度"></a>显示宽度</h3><p>使用一切数值类型时，指定其宽度均是为其指定显示宽度，并非存入的限制宽度。</p>
<p>以下示例将演示为<code>TINYINT</code>类型设置设置了显示宽度后，当宽度不够时将以指定字符进行填充。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> CREATE TABLE `test` (
    ->   `id` int(11) NOT NULL AUTO_INCREMENT,
    ->   `a` tinyint(4) unsigned zerofill DEFAULT NULL,
    ->   `b` smallint(6) unsigned DEFAULT NULL,
    ->   `c` mediumint(9) DEFAULT NULL,
    ->   `d` int(11) DEFAULT NULL,
    ->   `e` bigint(20) DEFAULT NULL,
    ->   PRIMARY KEY (`id`)
    -> ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
Query OK, 0 rows affected, 9 warnings (0.05 sec)</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> desc test;
+-------+------------------------------+------+-----+---------+----------------+
| Field | Type                         | Null | Key | Default | Extra          |
+-------+------------------------------+------+-----+---------+----------------+
| id    | int                          | NO   | PRI | NULL    | auto_increment |
| a     | tinyint(4) unsigned zerofill | YES  |     | NULL    |                |
| b     | smallint unsigned            | YES  |     | NULL    |                |
| c     | mediumint                    | YES  |     | NULL    |                |
| d     | int                          | YES  |     | NULL    |                |
| e     | bigint                       | YES  |     | NULL    |                |
+-------+------------------------------+------+-----+---------+----------------+
6 rows in set (0.00 sec)</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> INSERT INTO `test` (`a`, `b`, `c`, `d`, `e`) VALUES ('1', '1', '1', '1', '1');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO `test` (`id`, `a`, `b`, `c`, `d`, `e`) VALUES ('3', '-1', '-1', '1', '1', '1');
ERROR 1264 (22003): Out of range value for column 'a' at row 1
mysql> INSERT INTO `test` (`a`, `b`, `c`, `d`, `e`) VALUES ('333', '333', '333', '333', '333');
ERROR 1264 (22003): Out of range value for column 'a' at row 1</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> select * from test;
+----+------+------+------+------+------+
| id | a    | b    | c    | d    | e    |
+----+------+------+------+------+------+
|  3 | 0001 |    1 |    1 |    1 |    1 |
+----+------+------+------+------+------+
1 row in set (0.00 sec)</code></pre>
<h3 id="范围超出"><a href="#范围超出" class="headerlink" title="范围超出"></a>范围超出</h3><p>当范围超出时则不允许存取，抛出异常。</p>
<h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>浮点类型包括<code>FLOAT</code>、<code>DOUBLE</code>、<code>DECIMAL</code>。</p>
<h3 id="存取范围-1"><a href="#存取范围-1" class="headerlink" title="存取范围"></a>存取范围</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">存储大小</th>
<th align="center">最大显示宽度（个）</th>
<th align="center">范围（有符号）</th>
<th align="center">范围（无符号）</th>
<th align="center">精确度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FLOAT(m[,d])</td>
<td align="center">4Bytes</td>
<td align="center">m：255，d：30</td>
<td align="center">(-3.402 823 466 E+38，-1.175 494 351 E-38) - 0</td>
<td align="center">0 - (1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td align="center">点七位以内</td>
</tr>
<tr>
<td align="center">DOUBLE(m[,d])</td>
<td align="center">8Bytes</td>
<td align="center">m：255，d：30</td>
<td align="center">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308) - 0</td>
<td align="center">0 - (2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="center">点十五位以内</td>
</tr>
<tr>
<td align="center">DECIMAL(m[,d])</td>
<td align="center">m+2（如果m&lt;d则d+2）</td>
<td align="center">m：65，d：30</td>
<td align="center">取决于m,d（m范围（1-65），d范围（0-30））</td>
<td align="center">取决于m,d（m范围（1-65），d范围（0-30））</td>
<td align="center">绝对精准</td>
</tr>
</tbody></table>
<p><code>m</code>为其整数部分显示个数，<code>n</code>为其小数部分显示个数。</p>
<p><code>DECIMAL</code>底层由字符串进行存储，故精度不会出现偏差，也被称为定点类型。</p>
<h3 id="精度问题"><a href="#精度问题" class="headerlink" title="精度问题"></a>精度问题</h3><pre class=" language-mysql"><code class="language-mysql">mysql> CREATE TABLE `test` (
    -> `id` INT NOT NULL,
    -> `a` FLOAT NULL,
    -> `b` DOUBLE NULL,
    -> `c` DECIMAL NULL,
    -> PRIMARY KEY (`id`));
Query OK, 0 rows affected (0.02 sec)</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> desc test;
+-------+---------------+------+-----+---------+-------+
| Field | Type          | Null | Key | Default | Extra |
+-------+---------------+------+-----+---------+-------+
| id    | int           | NO   | PRI | NULL    |       |
| a     | float         | YES  |     | NULL    |       |
| b     | double        | YES  |     | NULL    |       |
| c     | decimal(10,0) | YES  |     | NULL    |       |
+-------+---------------+------+-----+---------+-------+
4 rows in set (0.01 sec)</code></pre>
<pre class=" language-mysql"><code class="language-mysql">INSERT INTO `test` (`id`, `a`, `b`,`c`) VALUES ('1', '3.1415', '3.14159','3.14159');

INSERT INTO `test` (`id`, `a`, `b`,`c`) VALUES ('2', '1.1111111111111111', '1.1111111111111111','1.1111111111111111');</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> select * from test;
+----+---------+--------------------+------+
| id | a       | b                  | c    |
+----+---------+--------------------+------+
|  1 |  3.1415 |            3.14159 |    3 |
|  2 | 1.11111 | 1.1111111111111112 |    1 |
+----+---------+--------------------+------+
2 rows in set (0.01 sec)</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table test modify `c` DECIMAL(65,30) NULL;
Query OK, 2 rows affected (0.13 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> desc test;
+-------+----------------+------+-----+---------+-------+
| Field | Type           | Null | Key | Default | Extra |
+-------+----------------+------+-----+---------+-------+
| id    | int            | NO   | PRI | NULL    |       |
| a     | float          | YES  |     | NULL    |       |
| b     | double         | YES  |     | NULL    |       |
| c     | decimal(65,30) | YES  |     | NULL    |       |
+-------+----------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select * from test;
+----+---------+--------------------+----------------------------------+
| id | a       | b                  | c                                |
+----+---------+--------------------+----------------------------------+
|  1 |  3.1415 |            3.14159 | 3.000000000000000000000000000000 |
|  2 | 1.11111 | 1.1111111111111112 | 1.000000000000000000000000000000 |
+----+---------+--------------------+----------------------------------+
2 rows in set (0.00 sec)

mysql> INSERT INTO `test` (`id`, `a`, `b`,`c`) VALUES ('3', '1.1111111111111111', '1.1111111111111111','1.1111111111111111');
Query OK, 1 row affected (0.00 sec)

mysql> select * from test;
+----+---------+--------------------+----------------------------------+
| id | a       | b                  | c                                |
+----+---------+--------------------+----------------------------------+
|  1 |  3.1415 |            3.14159 | 3.000000000000000000000000000000 |
|  2 | 1.11111 | 1.1111111111111112 | 1.000000000000000000000000000000 |
|  3 | 1.11111 | 1.1111111111111112 | 1.111111111111111100000000000000 |
+----+---------+--------------------+----------------------------------+
3 rows in set (0.00 sec)</code></pre>
<h2 id="位类型"><a href="#位类型" class="headerlink" title="位类型"></a>位类型</h2><p><code>BIT(M)</code>可以用来存放多位二进制数，<code>M</code>范围从1~64，如果不写默认为1位。</p>
<blockquote>
<p>注意：对于位字段需要使用函数读取</p>
</blockquote>
<p><code>bin()</code>显示为二进制</p>
<p><code>hex()</code>显示为十六进制</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> create table `test`(num bit);
Query OK, 0 rows affected (0.03 sec)

mysql> desc test;
+-------+--------+------+-----+---------+-------+
| Field | Type   | Null | Key | Default | Extra |
+-------+--------+------+-----+---------+-------+
| num   | bit(1) | YES  |     | NULL    |       |
+-------+--------+------+-----+---------+-------+
1 row in set (0.01 sec)

mysql> insert into `test`(num) values (1);
Query OK, 1 row affected (0.01 sec)

mysql> select * from test;
+------------+
| num        |
+------------+
| 0x01       |
+------------+
1 row in set (0.00 sec)

mysql> select bin(num),hex(num) from test;
+----------+----------+
| bin(num) | hex(num) |
+----------+----------+
| 1        | 1        |
+----------+----------+
1 row in set (0.00 sec)

mysql> alter table `test` modify num bit(5);
Query OK, 1 row affected (0.10 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql> insert into `test`(num) values (8);
Query OK, 1 row affected (0.00 sec)

mysql> select * from test;
+------------+
| num        |
+------------+
| 0x01       |
| 0x08       |
+------------+
2 rows in set (0.00 sec)

mysql> select bin(num),hex(num) from test;
+----------+----------+
| bin(num) | hex(num) |
+----------+----------+
| 1        | 1        |
| 1000     | 8        |
+----------+----------+
2 rows in set (0.00 sec)</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的数据表操作</title>
    <url>/2020/09/22/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><p>每一张数据表都相当于一个文件，在数据表中又分为表结构与表记录。</p>
<blockquote>
<p>表结构：包括存储引擎，字段，主外键类型，约束性条件，字符编码等</p>
<p>表记录：数据表中的每一行数据（不包含字段行）</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">name</th>
<th align="center">gender</th>
<th align="center">age</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Alice</td>
<td align="center">female</td>
<td align="center">18</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Bob</td>
<td align="center">male</td>
<td align="center">17</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Carol</td>
<td align="center">male</td>
<td align="center">16</td>
</tr>
</tbody></table>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>创建数据表其实大有讲究，它包括表名称，表字段，存储引擎，主外键类型，约束性条件，字符编码等。</p>
<p>如果<code>InnoDB</code>数据表没有创建主键，那么<code>MySQL</code>会自动创建一个以行号为准的隐藏主键。</p>
<pre class=" language-mysql"><code class="language-mysql">#语法: []为可选
create table 表名(
字段名1 类型[(宽度) 约束条件],
字段名2 类型[(宽度) 约束条件],
字段名3 类型[(宽度) 约束条件]
) [chrset="字符编码"];

#注意:
1. 在同一张表中，字段名是不能相同
2. 宽度和约束条件可选
3. 字段名和类型是必须的
4. 表中最后一个字段不要加逗号</code></pre>
<p>以下示例将演示在<code>school</code>数据库中创建<code>student</code>数据表。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> use school;
Database changed
mysql> create table student(
    ->        name varchar(32),
    ->        gender enum("male", "female"),
    ->        age smallint
    -> );
Query OK, 0 rows affected (0.18 sec)</code></pre>
<p>也可以不进入数据库在外部或另外的库中进行创建，那么创建时就应该指定数据库。</p>
<pre class=" language-mysql"><code class="language-mysql">create table 数据库名.新建的数据表名(
    字段名1 类型[(宽度) 约束条件],
    字段名2 类型[(宽度) 约束条件]
    );</code></pre>
<h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><p>在某一数据库中使用<code>show tables;</code>可查看该库下的所有数据表。</p>
<p>使用<code>show create table 表名;</code>可查看该表的创建信息。</p>
<p>使用<code>desc 表名;</code>可查看该表的表结构，包括字段，类型，约束条件等信息。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show tables; # 查看当前库下所有表名
+------------------+
| Tables_in_school |
+------------------+
| student          |
+------------------+
1 row in set (0.01 sec)</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> show create table student; # 查看student表的创建信息
+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                  |
+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| student | CREATE TABLE `student` (
  `name` varchar(32) DEFAULT NULL,
  `gender` enum('male','female') DEFAULT NULL,
  `age` smallint DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.05 sec)

mysql> show create table student \G; # 使用\G可将其转换为一行显示
*************************** 1. row ***************************
       Table: student
Create Table: CREATE TABLE `student` (
  `name` varchar(32) DEFAULT NULL,
  `gender` enum('male','female') DEFAULT NULL,
  `age` smallint DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)

ERROR:
No query specified</code></pre>
<pre class=" language-mysql"><code class="language-mysql">mysql> desc student; # 查看表结构
+--------+-----------------------+------+-----+---------+-------+
| Field  | Type                  | Null | Key | Default | Extra |
+--------+-----------------------+------+-----+---------+-------+
| name   | varchar(32)           | YES  |     | NULL    |       |
| gender | enum('male','female') | YES  |     | NULL    |       |
| age    | smallint              | YES  |     | NULL    |       |
+--------+-----------------------+------+-----+---------+-------+
3 rows in set (0.00 sec)</code></pre>
<h3 id="修改表名字"><a href="#修改表名字" class="headerlink" title="修改表名字"></a>修改表名字</h3><p> 使用<code>alter table 旧表名 rename 新表名;</code>可修改表名</p>
<p>以下示例将展示将<code>studnet</code>表名修改为<code>students</code>。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table student rename students;
Query OK, 0 rows affected (0.07 sec)

mysql> show tables;
+------------------+
| Tables_in_school |
+------------------+
| students         |
+------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="清空数据表"><a href="#清空数据表" class="headerlink" title="清空数据表"></a>清空数据表</h3><p>使用<code>truncate 表名</code>可将表中所有记录清空，并将部分结构进行重置（如自增字段会恢复至初始值）。</p>
<p>以下示例将演示创建出一张<code>temp</code>表并在其中插入一些数据后进行清空操作。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> create table temp(id smallint); # 新建temp表
Query OK, 0 rows affected (0.04 sec)

mysql> select * from temp;
Empty set (0.00 sec)

mysql> insert into temp values (1),(2); # 插入数据
Query OK, 2 rows affected (0.02 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from temp;
+------+
| id   |
+------+
|    1 |
|    2 |
+------+
2 rows in set (0.00 sec)

mysql> truncate temp; # 清空操作
Query OK, 0 rows affected (0.11 sec)

mysql> select * from temp;
Empty set (0.01 sec)</code></pre>
<h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p>使用<code>drop table 表名;</code>可删除某一数据表，也可使用<code>drop tables 表名1,表名2,表名n</code>进行批量删除的操作。</p>
<p>以下示例将演示创建出一个<code>temp</code>表再将其进行删除的操作。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> show tables;
+------------------+
| Tables_in_school |
+------------------+
| students         |
| temp             |
+------------------+
2 rows in set (0.00 sec)

mysql> drop table temp; # 删除temp表
Query OK, 0 rows affected (0.03 sec)

mysql> show tables;
+------------------+
| Tables_in_school |
+------------------+
| students         |
+------------------+
1 row in set (0.00 sec)</code></pre>
<h2 id="复制表操作"><a href="#复制表操作" class="headerlink" title="复制表操作"></a>复制表操作</h2><h3 id="结构复制"><a href="#结构复制" class="headerlink" title="结构复制"></a>结构复制</h3><pre class=" language-mysql"><code class="language-mysql">mysql> create table temp like students; # 结构复制
Query OK, 0 rows affected (0.03 sec)

mysql> show tables;
+------------------+
| Tables_in_school |
+------------------+
| students         |
| temp             |
+------------------+
2 rows in set (0.00 sec)

mysql> desc temp;
+--------+-----------------------+------+-----+---------+-------+
| Field  | Type                  | Null | Key | Default | Extra |
+--------+-----------------------+------+-----+---------+-------+
| name   | varchar(32)           | YES  |     | NULL    |       |
| gender | enum('male','female') | YES  |     | NULL    |       |
| age    | smallint              | YES  |     | NULL    |       |
+--------+-----------------------+------+-----+---------+-------+
3 rows in set (0.00 sec)</code></pre>
<h3 id="全部复制"><a href="#全部复制" class="headerlink" title="全部复制"></a>全部复制</h3><p>又要复制表结构，又要复制表记录，则使用以下语句（不会复制主键，外键，索引）。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> create table temp select * from students;
Query OK, 0 rows affected (0.04 sec)</code></pre>
<h3 id="选择复制"><a href="#选择复制" class="headerlink" title="选择复制"></a>选择复制</h3><p>选择某一字段及其记录进行复制，可使用以下语句。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> create table temp select host,user from mysql.user;
Query OK, 5 rows affected (0.13 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from temp;
+-----------+------------------+
| host      | user             |
+-----------+------------------+
| %         | root             |
| localhost | mysql.infoschema |
| localhost | mysql.session    |
| localhost | mysql.sys        |
| localhost | root             |
+-----------+------------------+
5 rows in set (0.00 sec)</code></pre>
<h2 id="表字段操作"><a href="#表字段操作" class="headerlink" title="表字段操作"></a>表字段操作</h2><p>表字段是属于表结构的一部分，可以将他作为文档的标题。</p>
<p>其标题下的一行均属于当前字段下的数据。</p>
<h3 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h3><pre class=" language-mysql"><code class="language-mysql"># ==== 增加多个字段  ====

      ALTER TABLE 表名
                          ADD 字段名  数据类型 [完整性约束条件…],
                          ADD 字段名  数据类型 [完整性约束条件…];

# ==== 增加单个字段，排在最前面  ====

      ALTER TABLE 表名
                          ADD 字段名  数据类型 [完整性约束条件…]  FIRST;

# ==== 增加单个字段，排在某一字段后面  ====

      ALTER TABLE 表名
                          ADD 字段名  数据类型 [完整性约束条件…]  AFTER 字段名;
</code></pre>
<p>以下示例将展示为<code>students</code>表新增一个名为<code>id</code>的非空字段，该字段放在最前面，并且在<code>age</code>字段后新增<code>class</code>字段。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table students
    ->       add id mediumint not null first,
    ->       add class varchar(12) not null after age
    -> ;
Query OK, 0 rows affected (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc students;
+--------+-----------------------+------+-----+---------+-------+
| Field  | Type                  | Null | Key | Default | Extra |
+--------+-----------------------+------+-----+---------+-------+
| id     | mediumint             | NO   |     | NULL    |       |
| name   | varchar(32)           | YES  |     | NULL    |       |
| gender | enum('male','female') | YES  |     | NULL    |       |
| age    | smallint              | YES  |     | NULL    |       |
| class  | varchar(12)           | NO   |     | NULL    |       |
+--------+-----------------------+------+-----+---------+-------+
5 rows in set (0.00 sec)</code></pre>
<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><p>修改字段分为修改字段名或者修改其数据类型。</p>
<pre class=" language-mysql"><code class="language-mysql"># ==== MODIFY只能修改数据类型及其完整性约束条件 ====  

      ALTER TABLE 表名 
                          MODIFY  字段名 数据类型 [完整性约束条件…];

# ==== CHANGE能修改字段名、数据类型及其完整性约束条件  ====  

      ALTER TABLE 表名 
                          CHANGE 旧字段名 新字段名 旧数据类型 [完整性约束条件…];
      ALTER TABLE 表名 
                          CHANGE 旧字段名 新字段名 新数据类型 [完整性约束条件…];
</code></pre>
<p>以下示例将展示修改<code>id</code>字段为自增主键，并将其名字修改为<code>stu_id</code>。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table students
    ->       change id stu_id mediumint not null primary key auto_increment first
    -> ;
Query OK, 0 rows affected (0.11 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc students;
+--------+-----------------------+------+-----+---------+----------------+
| Field  | Type                  | Null | Key | Default | Extra          |
+--------+-----------------------+------+-----+---------+----------------+
| stu_id | mediumint             | NO   | PRI | NULL    | auto_increment |
| name   | varchar(32)           | YES  |     | NULL    |                |
| gender | enum('male','female') | YES  |     | NULL    |                |
| age    | smallint              | YES  |     | NULL    |                |
| class  | varchar(12)           | NO   |     | NULL    |                |
+--------+-----------------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)</code></pre>
<p>如果不修改名字只修改其原本的类型或完整性约束条件，可使用<code>modify</code>进行操作。</p>
<h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><p>使用以下命令可删除某一字段。</p>
<pre class=" language-mysql"><code class="language-mysql">ALTER TABLE 表名 
                          DROP 字段名;</code></pre>
<p>以下示例将展示删除<code>class</code>字段。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table students drop class;
Query OK, 0 rows affected (0.10 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc students;
+--------+-----------------------+------+-----+---------+----------------+
| Field  | Type                  | Null | Key | Default | Extra          |
+--------+-----------------------+------+-----+---------+----------------+
| stu_id | mediumint             | NO   | PRI | NULL    | auto_increment |
| name   | varchar(32)           | YES  |     | NULL    |                |
| gender | enum('male','female') | YES  |     | NULL    |                |
| age    | smallint              | YES  |     | NULL    |                |
+--------+-----------------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)</code></pre>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>以下示例将展示如何将数据表<code>students</code>存储引擎修改为<code>memory</code>。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table students engine="memory";
Query OK, 0 rows affected (0.08 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> show create table students;
+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table    | Create Table                                                                                                                                                                                                                                           |
+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| students | CREATE TABLE `students` (
  `stu_id` mediumint NOT NULL AUTO_INCREMENT,
  `name` varchar(32) DEFAULT NULL,
  `gender` enum('male','female') DEFAULT NULL,
  `age` smallint DEFAULT NULL,
  PRIMARY KEY (`stu_id`)
) ENGINE=MEMORY DEFAULT CHARSET=utf8 |
+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)</code></pre>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>以下示例将展示如何将数据表<code>students</code>字符编码修改为<code>gbk</code>。</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> alter table students charset="gbk";
Query OK, 0 rows affected (0.13 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> show create table students;
+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table    | Create Table                                                                                                                                                                                                                                                                                |
+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| students | CREATE TABLE `students` (
  `stu_id` mediumint NOT NULL AUTO_INCREMENT,
  `name` varchar(32) CHARACTER SET utf8 DEFAULT NULL,
  `gender` enum('male','female') CHARACTER SET utf8 DEFAULT NULL,
  `age` smallint DEFAULT NULL,
  PRIMARY KEY (`stu_id`)
) ENGINE=MEMORY DEFAULT CHARSET=gbk |
+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
